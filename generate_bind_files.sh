#!/bin/bash
#
# Rick's own bind9 configuration file generator for Debian based systems.
# 
#    Copyright (C) 2014 Rick, rickstoolbox2014@gmail.com
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

# 20140912 by Rick, version 0.1

# Purpose: this script generates relevant bind9 configuration files in /etc/bind
# In three passes, one or more zones and corresponding IP's are read from a configuration file.
#
# Pass One: generate /etc/bind/named.conf.local; 
# Pass Two: generate /etc/bind/zones/rev.168.1.192.in-addr.arpa; 
# Pass Three: generate for each zone: /etc/bind/generate zones/tld.domain.db;
#
# The input configuration file has the follow format:
#
# #comment line
# com.my-url       12.23.34.56
# org.my-url       12.23.34.56

# the configuration file
CONFIGFILE=/root/bind_config.txt

# the root of the bind9 configuration
BINDCONFIGROOT=/etc/bind

# the configuration file is read three times

# this file is generated in pass one
NAMED_CONF_LOCAL=${BINDCONFIGROOT}/named.conf.local

# this file is generated in pass two
ARPA_ZONE=${BINDCONFIGROOT}/zones/rev.168.1.192.in-addr.arpa

# for every listed zone/IP address in the configuration file a file is generated in pass three
# as ${BINDCONFIGROOT}/zones/tld.domain.db

SERIAL=`date '+%Y%m%d%H%M'`

echo $SERIAL 

# backup current configuration

tar cvzf /root/${SERIAL}_bind_configuration.tgz /etc/bind 1>/dev/null

echo "Current bind configuration has been saved in /root/${SERIAL}_bind_configuration.tgz"

# read list of hosted domains and IPs from configuration file

SAVEIFS=$IFS
IFS=$(echo -en "\n\b")

# PASS ONE

echo "Started with phase one"

# generate header 

cat << EOFSTOP > ${NAMED_CONF_LOCAL}
// generated by Rick's bind9 files generator on `date`
//
// Do any local configuration here
// 
//include "/etc/bind/zones.rfc1918";

zone "1.168.192.in-addr.arpa" {
	type master;
	notify no; 
	file "/etc/bind/zones/rev.168.1.192.in-addr.arpa";
};
EOFSTOP

echo "Generating file ${NAMED_CONF_LOCAL}"

for LINE in `cat ${CONFIGFILE} | grep -v '^#'`; do

	ZONE=`echo ${LINE} | awk '{ print $1 }'`
	IP=`echo ${LINE} | awk '{ print $2 }'`

	echo "" >> ${NAMED_CONF_LOCAL}
	echo -e "zone \"${ZONE}\" {" >> ${NAMED_CONF_LOCAL}
	echo -e "\ttype master;" >> ${NAMED_CONF_LOCAL}
	echo -e "\tfile \"/etc/bind/zones/${ZONE}.db\";" >> ${NAMED_CONF_LOCAL}
	echo "};" >> ${NAMED_CONF_LOCAL} 
 
	echo -e "\tadded zone ${ZONE}"
done

echo "Finished phase one"
echo ""

# PASS TWO 
# zones/rev.168.1.192.in-addr.arpa

echo "Started with phase two"

echo "Generating file ${ARPA_ZONE}"

echo "" > ${ARPA_ZONE}
echo "# This file has been generated by Rick's own bind9 file generator on `date`." >> ${ARPA_ZONE}
echo "" >> ${ARPA_ZONE}
echo -e "\$TTL\t	604800" >> ${ARPA_ZONE}
echo -en "@\tIN\tSOA local." >> ${ARPA_ZONE}

for LINE in `cat ${CONFIGFILE} | grep -v '^#'`; do

	echo ${LINE} | grep '^#' > /dev/null
	QM=$?

	if [[ ${QM} -eq 0 ]]; then

		continue
	fi

	ENOZ=`echo -n ${LINE} | awk '{ print $1 }' | awk 'BEGIN {FS="."} { print $2 "." $1 "."}'`

	echo -n " ${ENOZ}" >> ${ARPA_ZONE}

	echo -e "\tadded zone ${ENOZ}"

done

echo -n " (" >> ${ARPA_ZONE} 
echo "" >> ${ARPA_ZONE} 

cat <<EOFSTOP | sed "s/SERIAL/${SERIAL}/g" >> ${ARPA_ZONE} 
		SERIAL	; Serial
		28800		; Refresh
		604800		; Refresh
		604800;
		86400 );
 
@	IN 	NS 	ns.
4 	IN 	PTR 	ns.local.
EOFSTOP

echo "Finished pass two"

# PASS THREE - generate all the /etc/bind/zones/tld.domain.db files

echo "Started with phase three"

for LINE in `cat ${CONFIGFILE} | grep -v '^#'`; do

	echo ${LINE} | grep '^#' > /dev/null
	QM=$?

	if [[ ${QM} -eq 0 ]]; then

		continue
	fi

	ENOZ=`echo -n ${LINE} | awk '{ print $1 }' | awk 'BEGIN {FS="."} { print $2 "." $1}'`
	THEIP=`echo -n ${LINE} | awk '{ print $2 }'`

	ZONEFILE=/etc/bind/zones/${ENOZ}.db

	echo -e "\tgenerating file ${ZONEFILE}"

cat << EOFSTOP > ${ZONEFILE}.tmp
; BIND data file for example.com 
; This file has been generated by Rick's own bind9 file generator on `date`."
;
$TTL 14400
@ IN SOA ns1.example.com. host.example.com. (
	SERIAL ; Serial
	7200 ; Refresh
	120 ; Retry
	2419200 ; Expire
	604800) ; Default TTL
;
example.com. IN NS ns1.example.com.
example.com. IN NS ns2.example.com.
 
example.com. IN MX 10 mail.example.com.
example.com. IN A THEIP
 
* IN A THEIP
ns1 IN A THEIP
ns2 IN A THEIP
www IN CNAME example.com.
mail IN A THEIP
ftp IN CNAME example.com.
example.com. IN TXT "v=spf1 ip4:THEIP a mx ~all"
mail IN TXT "v=spf1 a -all"
EOFSTOP

	cat ${ZONEFILE}.tmp | sed "s/example.com/${ENOZ}/g" | sed "s/THEIP/${THEIP}/g" | sed "s/SERIAL/${SERIAL}/g" > ${ZONEFILE}
	rm ${ZONEFILE}.tmp

done

echo "Finished pass three"

echo "Script finished"

exit
